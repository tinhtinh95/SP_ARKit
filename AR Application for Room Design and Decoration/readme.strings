/* @objc func didPan(_ recognizer: UIPanGestureRecognizer) {
    let location = recognizer.location(in: sceneView)
    // Drag the object on an infinite plane
    let arHitTestResult = sceneView.hitTest(location, types: .existingPlaneUsingExtent)
    if !arHitTestResult.isEmpty {
        let hit = arHitTestResult.first!
        
        
        sceneView.scene.rootNode.enumerateChildNodes{(node, _) in
            if node.name=="first" {
                node.removeFromParentNode()
            }
        }
        let newLocation = SCNVector3(x: hit.worldTransform.columns.3.x, y: hit.worldTransform.columns.3.y, z: hit.worldTransform.columns.3.z)
        let boxNode = addBox()
        boxNode.position = newLocation
        boxNode.name="first"
        sceneView.scene.rootNode.addChildNode(boxNode)
    } */


//        let box = SCNBox(width: 0.1, height: 0.1, length: 0.1, chamferRadius: 0)
//        let boxNode = SCNNode()
//        let material = SCNMaterial()
//        material.diffuse.contents=UIImage(named: "wood.jpg")
//        box.materials=[material]
//
//        boxNode.geometry = box
//        boxNode.physicsBody = SCNPhysicsBody(type: SCNPhysicsBodyType.static, shape: nil)
//
//
//        return boxNode



//        let cup=SCNScene(named: "cup.scn")
//        let node=cup?.rootNode.childNode(withName: "cup", recursively: true)
//        return node!


//@objc func scale(_ gesture: UIPinchGestureRecognizer) {
//    let location = gesture.location(in: sceneView)
//
//    guard let node = getNodeRelatedRootNode(at: location) else{return}
//    switch gesture.state {
//        case .began:
//        //            self.originalScale = node.scale
//        gesture.scale = CGFloat(node.scale.x)
//        case .changed:
//        print(".change")
//        //            guard var originalScale = self.originalScale else { return }
//        if gesture.scale > 2.0 || gesture.scale < 0.5 {
//            return
//        }
//        node.scale = SCNVector3(Float(gesture.scale),Float(gesture.scale),Float(gesture.scale))
//        //            originalScale.x = Float(gesture.scale)
//        //            originalScale.y = Float(gesture.scale)
//        //            originalScale.z = Float(gesture.scale)
//        //            node.scale = originalScale
//        //        case .ended:
//        //            print(".scale")
//        //            guard var originalScale = self.originalScale else { return }
//        //            if gesture.scale > 2.0 || gesture.scale < 0.5 {
//        //                return
//        //            }
//        //            originalScale.x = Float(gesture.scale)
//        //            originalScale.y = Float(gesture.scale)
//        //            originalScale.z = Float(gesture.scale)
//        //            node.scale = originalScale
//        //            gesture.scale = CGFloat(node.scale.x)
//        default:
//        gesture.scale = 1.0
//    }
//
//
//    //        if gesture.state == .began || gesture.state == .changed {
//    //            if gesture.scale > 2.0 || gesture.scale < 0.5 {
//    //                                return
//    //                            }
//    //            gesture.scale = CGFloat(node.scale.x)
//    //            node.scale = SCNVector3(Float(gesture.scale),Float(gesture.scale),Float(gesture.scale))
//    //
//    //        }else{
//    //            gesture.scale = 1.0
//    //        }
//
//    }
